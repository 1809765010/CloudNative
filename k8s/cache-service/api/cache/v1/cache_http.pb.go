// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: cache/v1/cache.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCacheServiceGetData = "/api.cache.v1.CacheService/GetData"
const OperationCacheServiceHealthCheck = "/api.cache.v1.CacheService/HealthCheck"
const OperationCacheServiceSetData = "/api.cache.v1.CacheService/SetData"

type CacheServiceHTTPServer interface {
	// GetData 获取数据接口
	GetData(context.Context, *GetDataRequest) (*GetDataReply, error)
	// HealthCheck 健康检查接口
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckReply, error)
	// SetData 设置数据接口
	SetData(context.Context, *SetDataRequest) (*SetDataReply, error)
}

func RegisterCacheServiceHTTPServer(s *http.Server, srv CacheServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/data/{key}", _CacheService_GetData0_HTTP_Handler(srv))
	r.POST("/api/v1/data", _CacheService_SetData0_HTTP_Handler(srv))
	r.GET("/health", _CacheService_HealthCheck0_HTTP_Handler(srv))
}

func _CacheService_GetData0_HTTP_Handler(srv CacheServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDataRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCacheServiceGetData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetData(ctx, req.(*GetDataRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDataReply)
		return ctx.Result(200, reply)
	}
}

func _CacheService_SetData0_HTTP_Handler(srv CacheServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetDataRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCacheServiceSetData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetData(ctx, req.(*SetDataRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetDataReply)
		return ctx.Result(200, reply)
	}
}

func _CacheService_HealthCheck0_HTTP_Handler(srv CacheServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HealthCheckRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCacheServiceHealthCheck)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HealthCheck(ctx, req.(*HealthCheckRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HealthCheckReply)
		return ctx.Result(200, reply)
	}
}

type CacheServiceHTTPClient interface {
	GetData(ctx context.Context, req *GetDataRequest, opts ...http.CallOption) (rsp *GetDataReply, err error)
	HealthCheck(ctx context.Context, req *HealthCheckRequest, opts ...http.CallOption) (rsp *HealthCheckReply, err error)
	SetData(ctx context.Context, req *SetDataRequest, opts ...http.CallOption) (rsp *SetDataReply, err error)
}

type CacheServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewCacheServiceHTTPClient(client *http.Client) CacheServiceHTTPClient {
	return &CacheServiceHTTPClientImpl{client}
}

func (c *CacheServiceHTTPClientImpl) GetData(ctx context.Context, in *GetDataRequest, opts ...http.CallOption) (*GetDataReply, error) {
	var out GetDataReply
	pattern := "/api/v1/data/{key}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCacheServiceGetData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CacheServiceHTTPClientImpl) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...http.CallOption) (*HealthCheckReply, error) {
	var out HealthCheckReply
	pattern := "/health"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCacheServiceHealthCheck))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CacheServiceHTTPClientImpl) SetData(ctx context.Context, in *SetDataRequest, opts ...http.CallOption) (*SetDataReply, error) {
	var out SetDataReply
	pattern := "/api/v1/data"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCacheServiceSetData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
